// $codepro.audit.disable overloadedMethods, importStyle, com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.constructorsOnlyInvokeFinalMethods
/**
 * ShipyardWindow.java
 * @version 1.0
 * some code generated by WindowBuilder--some CodePro issues are ignored 
 * for this reason
 */
package edu.gatech.quirkyqwerties.spacetraders.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerListModel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;

import edu.gatech.quirkyqwerties.spacetraders.controller.GameController;
import edu.gatech.quirkyqwerties.spacetraders.model.Player;
import edu.gatech.quirkyqwerties.spacetraders.model.Ship;
import edu.gatech.quirkyqwerties.spacetraders.model.Shipyard;

import net.miginfocom.swing.MigLayout;

/**
 * Represents the shipyard where the user may trade his/her
 * old ship for a new a new one. Fuel can also be bought in
 * the shipyard.
 * 
 * @author Quirky Qwertys
 * @version 1.0 11.05.12
 */
public class ShipyardWindow extends JPanel implements java.io.Serializable{
	
	/** Represents the current game's game controller. */
	private final GameController controller;
	
	/** The player's ship. */
	private Ship ship;
	
	/** The current game's player. */
	private Player player;
	
	/** Table used to represent ship yard with different ships. */
	private final JTable table;
	
	/** Represents the "Buy" button. */
	private final JButton btnBuy;
	
	/** Format of a text field. */
	private JFormattedTextField ftf;
	
	/** The spinner button used to choose the amount of fuel. */
	private final JSpinner spinner;
	
	/** Represents the number of columns in JSpinner. */
	private static final int SPINNER_COLS = 4;
	
	/** Label used to represent the ship's current fuel amount. */
	private final JLabel currFuelLbl;
	
	/** Label used to represent the player's current amount of credits. */
	private final JLabel lblCreditsAvailable;
	
	/** Represents the "Trade" button. */
	private final JButton btnTrade;
	
	/** List of ships available at the shipyard. */
	private Ship[] shipList;
	
	/** Label for the player's ship cost.*/
	private final JLabel shipLbl;
	
	/** Label for the player's ship type. */
	private final JLabel lblYourShip;
	
	/** Label for the amount of damage the ship currently has. */
	private final JLabel lblDamage;
	
	/** Model used to style the table in the GUI. */
	private final ShipTableModel shipTableModel; // $codepro.audit.disable declareAsInterface -->
	
	/** The border used in the GUI. */
	private final Border tableBorder;
	
	/** Maximum amount of fuel a player can buy. */
	private int maxFuel;
	
	/** Default price for fuel. */
	private static final int DEFAULT_FUEL_PRICE = 100;
	
	/** Price of fuel per ton. */
	private final int fuelPrice = DEFAULT_FUEL_PRICE;
	
	/** Represents the "Repair" button. */
	private final JButton btnRepair;
	
	/** Empty label used to make space in the layout. */
	private final JLabel space;
	
	/** Empty label used to make space in the layout. */
	private final JLabel space2;
	
	/** Label containing the cost for a ship's repair. */
	private final JLabel lblRepairCost;
	
	/**
	 * Create the panel.
	 * 
	 * @param controller the current game controller in the game
	 */
	public ShipyardWindow(GameController controller){
		this.controller = controller;
		
		this.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20)); // $codepro.audit.disable numericLiterals
		
		setLayout(new BorderLayout(0, 0));
		setOpaque(false);
		
		final JLabel lblWelcomeToThe =Style.createNormalLabel();
		lblWelcomeToThe.setText("You may trade your ship for a new " +
				"one or buy fuel here.");
		
		lblYourShip = Style.createNormalLabel();
		
		shipLbl = Style.createNormalLabel();
		
		btnTrade = new JButton("Trade");
		btnTrade.addActionListener(new TradeListener());
		
		tableBorder = new LineBorder(new Color(0, 255, 0, 255), 1); // $codepro.audit.disable numericLiterals
		shipTableModel= new ShipTableModel();
		table = new JTable(shipTableModel);
		table.setOpaque(false);
		styleTable(table);
		final JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.getViewport().setOpaque(false);
		scrollPane.setOpaque(false);
		
		final JLabel lblCurrentFuelAmount = Style.createNormalLabel(); 
		lblCurrentFuelAmount.setText("Current Fuel Amount");
		
		final JLabel lblFuelForSell = Style.createNormalLabel(); 
		lblFuelForSell.setText("Qty. Fuel to Buy");
		
		lblDamage = Style.createNormalLabel();
		
		currFuelLbl = Style.createNormalLabel();
		currFuelLbl.setVerticalAlignment(SwingConstants.TOP);
		
		lblRepairCost = Style.createNormalLabel();
		
		lblCreditsAvailable = Style.createNormalLabel();
		final JLabel lblCostCrton = Style.createNormalLabel(); 
		lblCostCrton.setText("Fuel Cost: 100 cr./ton");

		final JPanel panel = new JPanel();
		panel.setBackground(new Color(0x66, 0x66, 0x66, 255)); // $codepro.audit.disable numericLiterals
		panel.setBorder(new LineBorder(new Color(0x5d, 0xdf, 0xfb, 255), 2, true)); // $codepro.audit.disable numericLiterals
		add(panel, BorderLayout.CENTER);
		panel.setLayout(new MigLayout("", "[grow][][grow]", 
				"[][][][][][grow][][][][][][grow][]"));
		
		panel.add(lblWelcomeToThe, "cell 0 0 3 1");
		panel.add(lblYourShip, "cell 0 1");
		panel.add(shipLbl, "cell 0 2");
		panel.add(scrollPane, "cell 0 3 3 1,grow");
		panel.add(btnTrade, "cell 2 4, align right");
		
		panel.add(lblCurrentFuelAmount, "cell 0 6 2 1");
		panel.add(lblFuelForSell, "cell 2 6");
		panel.add(lblDamage, "cell 0 5");
		panel.add(currFuelLbl, "cell 0 7");
		panel.add(lblRepairCost, "cell 2 5");
		
		btnRepair = new JButton("Repair");
		panel.add(btnRepair, "cell 1 5");
		btnRepair.addActionListener(new RepairListener());
		
		space = new JLabel("    ");
		panel.add(space, "cell 0 6 2 1");
		
		space2 = new JLabel("    ");
		panel.add(space2, "cell 0 7");
		
		btnBuy = new JButton("  Buy  ");
		btnBuy.addActionListener(new BuyListener());
		panel.add(btnBuy, "cell 1 7");
		panel.add(lblCreditsAvailable, "cell 0 8");
		panel.add(lblCostCrton, "cell 2 8");
		
		spinner = new JSpinner();
		panel.add(spinner, "cell 2 7");
	}
	
	/**
	 * Updates the buttons, which can be enabled or disabled 
	 * depending on whether or not the player has enough credits
	 * to purchase a ship or fuel. Labels are also updated after
	 * a purchase.
	 */
	private void update(){
		
		// If the player has no money disable all buttons
		if (player.getMoney() == 0){
			btnTrade.setEnabled(false);
			btnRepair.setEnabled(false);
			btnBuy.setEnabled(false);
		}
		
		else{
			btnBuy.setEnabled(true);
			btnTrade.setEnabled(true);
			btnRepair.setEnabled(true);
		}
		
		if (ship.getDamageSustained() > 0){
			btnRepair.setEnabled(true);
		}
		else if (ship.getDamageSustained() == 0){
			btnRepair.setEnabled(false);
		}
		
		// If the tank of player's ship is full disable "Buy" button
		if (ship.getMaxFuel() == 0 || player.getMoney() == 0){
			btnBuy.setEnabled(false);
		}
		else{
			btnBuy.setEnabled(true);
			lblCreditsAvailable.setText("Credits Available: " + 
			                        Integer.toString(player.getMoney()));
		
			currFuelLbl.setText(Integer.toString(player.getShip().getFuelAmount()) + 
				" tons / " + Integer.toString(player.getShip().getFuelCapacity()) 
				+ " tons");
		}
		repaint();
	}
	
	/**
	 * Repairs all of the Ship's damage.
	 * 
	 * @author Quirky Qwertys
	 */
	private class RepairListener implements ActionListener{ // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.alwaysOverridetoString.alwaysOverrideToString -->
		
		/**
		 * When "Repair" button is clicked, the Ship's sustained 
		 * damage goes back down to 0.
		 * 
		 * @param event the action of clicking the "Repair" button
		 */
		public void actionPerformed(ActionEvent event){
			if (ship.getDamageSustained() <= player.getMoney()){
				player.addMoney(-1 * ship.getDamageSustained());
				ship.setDamageSustained(0);
				lblDamage.setText("Sustained Damage: " + 
				Integer.toString(ship.getDamageSustained()));
				lblCreditsAvailable.setText("Credits Available: " + 
                        Integer.toString(player.getMoney()));
			}
			update();
		}
	}
	
	/**
	 * Listener used to update amount of credits available and 
	 * fuel available for sell when the user buys fuel.
	 * 
	 * @author Quirky Qwertys
	 */
	private class BuyListener implements ActionListener{ // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.alwaysOverridetoString.alwaysOverrideToString -->
		
		/**
		 * When the "Buy" button is clicked the ship's current
		 * amount of fuel and the player's credits  are updated
		 * if the user has enough credits.
		 * 
		 * @param event the action of pressing the "Buy" button
		 */
		public void actionPerformed(ActionEvent event){
			try{
			    final int fuelSell = Integer.parseInt(ftf.getText());
				final int totalFuelPrice = fuelSell * fuelPrice;
				if (player.getShip().getMaxFuel() >= fuelSell && totalFuelPrice 
						<= player.getMoney()){
					player.addMoney(-1 * totalFuelPrice);
					ship.setFuelAmount(player.getShip().getFuelAmount() + fuelSell);
				}
			}
			catch (Exception e){
				e.printStackTrace();
			}
			update();
		}
	}
	
	/**
	 * Listener used to update the player's status after 
	 * he/she has traded the ship.
	 * 
	 * @author Quirky Qwertys
	 */
	private class TradeListener implements ActionListener{ // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.alwaysOverridetoString.alwaysOverrideToString
		
		/**
		 * If user has enough credits, then the user may 
		 * trade the current ship for a new one and pay the
		 * difference.
		 * 
		 * @param event the action when the "Trade" button is clicked 
		 */
		public void actionPerformed(ActionEvent event){
			final int currShipCost = player.getShip().getCost();
			final Ship selectedShip = shipTableModel.get(table.getSelectedRow()); // $codepro.audit.disable com.instantiations.eclipse.analysis.audit.security.incompatibleTypesStoredInACollection
			
			if (selectedShip.getCost() <= currShipCost){
				player.setShip(selectedShip);
			}
			
			final int totalAssets = currShipCost + player.getMoney();
			if (totalAssets >= selectedShip.getCost()){
				player.setShip(selectedShip);
				if (selectedShip.getCost() - currShipCost > 0){ 
					player.addMoney((selectedShip.getCost() - currShipCost) * -1);
				}
			}
			shipLbl.setText("Cost of your ship: " + player.getShip().getCost());
			lblYourShip.setText("Your Ship: " + player.getShip().getName());
			update();
		}
	}
	
	/**
	 * Model used to stylize the table in the window.
	 * 
	 * @author Qwirky Qwertys
	 */
	private static class ShipTableModel extends ListTableModel<Ship>{ // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.alwaysOverridetoString.alwaysOverrideToString
		
		/**
		 * Instantiates the model for the table.
		 */
		public ShipTableModel(){ // $codepro.audit.disable publicConstructorInNonPublicType
			super(new String[]{"Ship Type", "Cost"}, new ArrayList<Ship>());
		}

		/**
		 * Gets the value of a specified cell in the table.
		 * 
		 * @param row the table's corresponding row
		 * @param col the table's corresponding column
		 * @return the ship the user clicked on the table
		 */
		@Override
		public Object getValueAt(int row, int col) {
			final Ship ship = get(row);
			switch(col){
				case 0:
					return ship.getName();
				case 1: 
					return ship.getCost();
				default: 
					return null;
			}
		}
	}
	
	/**
	 * Styles the table to make it transparent.
	 * 
	 * @param table the table that will be styled
	 */
	public void styleTable(JTable table){
		table.setOpaque(false);
		((DefaultTableCellRenderer) 
			table.getDefaultRenderer(Object.class)).setForeground(new Color(0, 255, 0)); // $codepro.audit.disable numericLiterals
		((DefaultTableCellRenderer) 
			table.getDefaultRenderer(Object.class)).setOpaque(false);
		table.setShowGrid(false);
		table.setBorder(tableBorder);
		table.setSelectionForeground(Color.YELLOW);
		table.setSelectionBackground(Color.yellow);
		table.setColumnSelectionAllowed(false);
		table.setRowSelectionAllowed(true);
	}
	
	/**
	 * Uses input from current player to set up the shipyard.
	 * 
	 * @param p the player
	 */
	public void setPlayer(Player p){
		player = p;
		ship = p.getShip();
		
		lblCreditsAvailable.setText("Credits Available: " + p.getMoney());
		lblYourShip.setText("Your Ship: " + ship.getName());
		shipLbl.setText("Cost of your ship: " + ship.getCost());
		lblDamage.setText("Sustained Damage: " + 
		                  Integer.toString(ship.getDamageSustained()));
		currFuelLbl.setText(Integer.toString(ship.getFuelAmount()) + " tons / " + 
                Integer.toString(ship.getFuelCapacity()) + " tons");
		lblRepairCost.setText("1 cr. / Damage point");
		
		maxFuel = player.getShip().getMaxFuel();
		
		// Array of possible tons of fuel that can be bought
		final Integer[] fuelQuantity = new Integer[maxFuel];
		for (int i = 0; i < maxFuel; i++){
			fuelQuantity[i] = i + 1;
		}
		
		SpinnerListModel spinnerModel;
		
		// In case player's just bought/traded for a new ship
		// if window is closed and reopened--that case is handled
		// here
		if (maxFuel == 0){
			spinnerModel = new SpinnerListModel(new Integer[] {0});
		}
		else{
			spinnerModel = new SpinnerListModel(fuelQuantity);
		}
		spinner.setModel(spinnerModel);
		
		final JComponent editor = spinner.getEditor();
		
		// Change the size of the spinner's text field 
		ftf = ((JSpinner.DefaultEditor) editor).getTextField();
		ftf.setColumns(SPINNER_COLS);
		
		final Shipyard yard;
		try {
			yard = new Shipyard(ship);
		
			shipList = yard.getShips();
		
			shipTableModel.clear();
			shipTableModel.addAll(Arrays.asList(shipList));
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		update();
	}
	
	/**
	 * Creates a String with the types of ships sold in
	 * the shipyard.
	 * 
	 * @return a String with all the ships.
	 */
	public String toString(){
		final StringBuilder sb = new StringBuilder();
		for (Ship ship : shipList){
			sb.append("Name: " + ship.getName() + "Cost: " + ship.getCost()
					+ "\n");
		}
		return sb.toString();
	}
}