/**
 * EncounterPanel.java
 * @version 1.0
 * copyright 2012
 * some code generated by WindowBuilder--some CodePro issues are ignored 
 * for this reason
 */
package edu.gatech.quirkyqwerties.spacetraders.view;

import net.miginfocom.swing.MigLayout;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel;

import javax.swing.JButton;
import javax.swing.border.LineBorder;

import edu.gatech.quirkyqwerties.spacetraders.controller.GameController;
import edu.gatech.quirkyqwerties.spacetraders.model.Pirate;
import edu.gatech.quirkyqwerties.spacetraders.model.Player;
import edu.gatech.quirkyqwerties.spacetraders.model.Ship;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.util.Random;
import java.io.IOException;

/**
 * Represents the window that pops up if a pirate encounter
 * is generated.
 * 
 * @author Quirky Qwertys
 * @version 1.0 11.11.12
 */
public class EncounterPanel extends JPanel {
	
	/** Field used to serialize the class. */
	private static final long serialVersionUID = 1L;
	
	/** Instance of a pirate in the game during an encounter. */
	private Pirate pirate;
	
	/** Pirate's ship's hull strength. */
	private int pirateStrength;
	
	/** The current player in the game. */
	private Player player;
	
	/** Player's ship's hull strength. */
	private int playerStrength;
	
	/** Displays the pirate ship's total damage. */
	private final JLabel damageInfo;
	
	/** Displays the player's ship's total damage. */
	private final JLabel yourDamagePoints;
	
	/** Label that displays amount of damage taken by the pirate. */
	private final JLabel pirateDamagePoints;
	
	/** The "Flee" button on the GUI. */ 
	private final JButton btnFlee;
	
	/** Random number generator used to produce percentage of money the
	    player can gain/lose depending on the outcome of their encounter. */
	private final Random random = new Random();
	
	/** Current game controller used in the game. */
	private final GameController gc;
	
	/** The background image used in the GUI. */
	private Image imageBackground = null;
	
	/** Source of an image. */
	private static final String IMAGE_SOURCE = "/edu/gatech/quirkyqwerties" +
			"/spacetraders/view/pirateflag.jpg";
	
	/** Maximum percentage of money player can gain or lose through encounter. */
	private static final float PERCENT = 0.20f;
	
	/** The border thickness used in the GUI. */
	private static final int THICKNESS = 2;
	
	/** Color value used for the background of the panel. */
	private static final int COLOR = 0x66;
	
	/** Transparency value used for the background of the panel. */
	private static final int ALPHA = 125;
	
	/** Border dimension. */
	private static final int DIMENSION = 20;
	
	/**
	 * Create the pirate encounter panel.
	 * 
	 * @param gc the current game's game controller
	 */
	public EncounterPanel(GameController gc){ // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.audit.rule.effectivejava.constructorsOnlyInvokeFinalMethods
		this.gc = gc;
		
		try{
			imageBackground =ImageIO.read(getClass().getResource(IMAGE_SOURCE));
		} 
		catch (IOException e){
			e.printStackTrace();
		}
		
		this.setBorder(BorderFactory.createEmptyBorder(DIMENSION, DIMENSION, 
				DIMENSION, DIMENSION));
		setLayout(new BorderLayout(0, 0));
		
		final JPanel panel = new JPanel();
		panel.setBackground(new Color(COLOR, COLOR, COLOR, ALPHA));
		
		panel.setBorder(new LineBorder(Color.RED, THICKNESS, true));
		add(panel, BorderLayout.CENTER);
		
		panel.setLayout(new MigLayout("", "[grow][][grow]", 
				                      "[][][][][][grow][][][][grow][]"));
		
		final JLabel message = Style.createRedLabel();
		message.setText("You've encountered a pirate! You may fight or" +
				        " flee the pirate. If you attack, ");
		panel.add(message, "cell 0 0 3 1");
		
		final JLabel message2 = Style.createRedLabel();
		message2.setText("keep in mind that once damage points " +
				         "exceed a ship's hull strength, the");
		panel.add(message2, "cell 0 1 3 1");
		
		final JLabel message3 = Style.createRedLabel();
		message3.setText("ship may be destroyed. If you flee, you may lose " +
				         "some credits.");
		panel.add(message3, "cell 0 2 3 1");
		
		final JLabel label = new JLabel("");
		panel.add(label, "cell 0 3 3 1");
		
		yourDamagePoints = Style.createRedLabel();
		panel.add(yourDamagePoints, "cell 1 5");
		
		final JLabel yourDamage = Style.createRedLabel();
		yourDamage.setText("Your ship's damage:");
		panel.add(yourDamage, "flowx,cell 0 5");
		
		pirateDamagePoints = Style.createRedLabel();
		pirateDamagePoints.setText("0");
		panel.add(pirateDamagePoints, "cell 1 6");
		
		final JLabel pirateDamage = Style.createRedLabel();
		pirateDamage.setText("Pirate ship's damage:" );
		panel.add(pirateDamage, "cell 0 6");
		
		damageInfo = Style.createRedLabel();
		panel.add(damageInfo, "cell 0 8 3 1");
		
		final JButton btnAttack = new JButton("Attack");
		btnAttack.addActionListener(new AttackListener());
		panel.add(btnAttack, "cell 0 10,alignx center,aligny center");
		
	    btnFlee = new JButton(" Flee ");
		btnFlee.addActionListener(new FleeListener());
		panel.add(btnFlee, "cell 2 10,alignx center");
	}
	
	/**
	 * Allows the user to attack a pirate ship. Once the
	 * user attacks, the pirate retaliates. Also, the user
	 * loses the option to escape.
	 * 
	 * @author Quirky Qwertys
	 */
	private class AttackListener implements ActionListener{
		
		/** Message that appears when the player's ship is destroyed. */
		private static final String GAME_OVER_MESSAGE = "Your ship has been " +
				                   "destroyed and you've lost all items. GAME " +
							       "OVER!";
		
		/** Damage dealt to the pirate's ship in one attack. */
		private int currPirateDamage;
		
		/**
		 * When the user attacks, damage is dealt to the 
		 * pirate's ship. The pirate immediately attacks.
		 * If either ship gets damage points that are greater
		 * than or equal to the ship's hull strength, then
		 * that ship is destroyed.
		 * 
		 * @param event the action of clicking the "Attack" button
		 */
		public void actionPerformed(ActionEvent event){
			final Ship playerShip = player.getShip();
			final Ship pirateShip = pirate.getShip();
			final int playerDamage = playerShip.getDamageSustained();
			final int pirateDamage = pirateShip.getDamageSustained();

			if (playerDamage < playerStrength && pirateDamage < pirateStrength){
				
				// Attack the pirate
				currPirateDamage = playerShip.attack(pirateShip);
				damageInfo.setText("You dealt " + Integer.toString(currPirateDamage) + 
						           " points of damage to the pirate's ship!");
				final int totalPirateDamage = pirate.getShip().getDamageSustained();
				pirateDamagePoints.setText(Integer.toString(totalPirateDamage));
				
				// Pirate attacks user
				pirate.attack(playerShip); 
				final int totalPlayerDamage = player.getShip().getDamageSustained();
				yourDamagePoints.setText(Integer.toString(totalPlayerDamage));
				repaint();
				
				/* If the player's damage points exceed their ship's hull strength,
				   then his/her ship is destroyed (i.e. game over). */
				if (totalPlayerDamage >= playerStrength){
					JOptionPane.showMessageDialog(null, GAME_OVER_MESSAGE);
					gc.showStart();
				}
				
				/* If the pirate's damage points exceed its ship's hull strength,
				   then the player earns credits. */
				else if (totalPirateDamage >= pirateStrength){
					final int money = random.nextInt((int) (player.getMoney() *  // $codepro.audit.disable lossOfPrecisionInCast
							                         PERCENT)); 
					player.addMoney(money);
					JOptionPane.showMessageDialog(null, "You just gained " + money + 
							                      " credits.");
					gc.showPlanet();
				}
			}
		}
		
		/**
		 * Creates a String with the current amount of 
		 * damage points that was dealt to the pirates.
		 * 
		 * @return the amount of damage done 
		 */
		public String toString(){
			return "You dealt " + currPirateDamage + "to the pirate's ship!";
		}
	}
	
	/**
	 * Allows the user to flee from a pirate.
	 * 
	 * @author Quirky Qwertys
	 */
	private class FleeListener implements ActionListener{
		
		/** Amount of money player can lose when he/she flees. */
		private int money = 0;
		
		/**
		 * Ends the user's encounter with the pirate. The user
		 * can lose up to 20% of his/her credits when he/she flees.
		 * 
		 * @param event the action of clicking on the "Flee" button
		 */
		public void actionPerformed(ActionEvent event){
			if (player.getMoney() != 0){
				money = random.nextInt((int) (player.getMoney() * PERCENT)); // $codepro.audit.disable lossOfPrecisionInCast
				player.addMoney(-1 * money);
				JOptionPane.showMessageDialog(null, "You just lost " + money +
						                      " credits.");
				gc.showPlanet();
			}
		}
		
		/**
		 * Creates a String with information about the number
		 * of credits a player has lost when he/she flees.
		 * 
		 * @return the String with the amount of credits lost
		 */
		public String toString(){
			return "You lost " + Integer.toString(money) + "credits";
		}
	}

	/**
	 * Sets the player.
	 * 
	 * @param player the player
	 * @throws IOException
	 */
	public void setPlayer(Player player) throws IOException {
		this.player = player;
		pirate = new Pirate();
		damageInfo.setText("");
		final int pirateShipDamage = pirate.getShip().getDamageSustained();
		final int playerShipDamage = player.getShip().getDamageSustained();
		
		pirateDamagePoints.setText(Integer.toString(pirateShipDamage));
		yourDamagePoints.setText(Integer.toString(playerShipDamage));
		pirateStrength = pirate.getShip().getHullStrength();
		playerStrength = player.getShip().getHullStrength();
	}
	
	/**
	 * Draws the background image on the GUI.
	 * @param g the graphics object
	 */
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(imageBackground, 0, 0, null); // $codepro.audit.disable com.instantiations.assist.eclipse.analysis.unusedReturnValue
	}
}